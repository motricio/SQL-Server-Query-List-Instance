-- =============================================
-- Author:		Mauricio Rodriguez R.
-- Create date: 2017-01-01
-- Description:	Task/process duration
-- =============================================

/* DURACION DE TAREAS */
use master
go
SELECT
    percent_complete,
    start_time ,
    command, 
    b.name AS DatabaseName, --Most of the time will said Main but this is because db is not accesible
    DATEADD(ms,estimated_completion_time,GETDATE()) AS RemainTime,
    (estimated_completion_time/1000/60) AS MinutesToFinish

    FROM sys.dm_exec_requests a
    INNER JOIN sys.databases b 
    ON a.database_id = b.database_id
    WHERE (command like '%ALTER INDEX%'
    or command like '%BACKUP%' or command like '%DBCC%' or command like '%RESTORE%')
    AND (estimated_completion_time > 0)


/* duración de un db e recovery*/
	
select percent_complete,
total_elapsed_time/1000/60 as minutes_elapsed,
estimated_completion_time/1000/60 as RemainTime,
(((100-(percent_complete))*(total_elapsed_time/1000))/percent_complete)/60 as minutes_remaind_stimated,
100-(percent_complete) as RemaindPercent_remaind,
DATEADD(mi,(((100-(percent_complete))*(total_elapsed_time/1000))/percent_complete)/60,GETDATE())as time_finish_estimated
 from sys.dm_exec_requests 
 where command='DB STARTUP'and percent_complete <> 0
 
 /*	QUERY EJECUTADOS*/

SELECT SDER.[statement_start_offset],   
  SDER.[statement_end_offset],  
  CASE   
     WHEN SDER.[statement_start_offset] > 0 THEN  
        --The start of the active command is not at the beginning of the full command text 
        CASE SDER.[statement_end_offset]  
           WHEN -1 THEN  
              --The end of the full command is also the end of the active statement 
              SUBSTRING(DEST.TEXT, (SDER.[statement_start_offset]/2) + 1, 2147483647) 
           ELSE   
              --The end of the active statement is not at the end of the full command 
              SUBSTRING(DEST.TEXT, (SDER.[statement_start_offset]/2) + 1, (SDER.[statement_end_offset] - SDER.[statement_start_offset])/2)   
        END  
     ELSE  
        --1st part of full command is running 
        CASE SDER.[statement_end_offset]  
           WHEN -1 THEN  
              --The end of the full command is also the end of the active statement 
              RTRIM(LTRIM(DEST.[text]))  
           ELSE  
              --The end of the active statement is not at the end of the full command 
              LEFT(DEST.TEXT, (SDER.[statement_end_offset]/2) +1)  
        END  
     END AS [executing statement],  
  DEST.[text] AS [full statement code]  
FROM sys.[dm_exec_requests] SDER CROSS APPLY sys.[dm_exec_sql_text](SDER.[sql_handle]) DEST  
WHERE SDER.session_id > 50  
ORDER BY SDER.[session_id], SDER.[request_id]


/*SESIONES ACTIVAS*/

SELECT
	Sessions.session_id AS SessionID, Requests.request_id AS RequestID,
	Requests.database_id AS DatabaseID, databases.name AS DatabaseName,
	Sessions.login_name AS LoginName, Sessions.host_name AS HostName, Sessions.program_name AS ProgramName,
	Sessions.client_interface_name AS ClientInterfaceName,
	Requests.blocking_session_id AS BlockedBySessionID,
	ISNULL(BlockRequests.BlockingRequestCount,0) AS BlockingRequestCount,
	Requests.wait_type AS WaitType,
	Requests.wait_time AS WaitTime, Requests.cpu_time AS CPUTime, Requests.total_elapsed_time AS ElapsedTime,
	Requests.reads AS Reads, Requests.writes AS Writes, Requests.logical_reads AS LogicalReads,
	dm_os_tasks.PendingIOCount, Requests.row_count AS [RowCount],
	Requests.granted_query_memory*8 AS GrantedQueryMemoryKB,
	CONVERT(BigInt, (Requests.cpu_time+1))*CONVERT(BigInt, (Requests.reads*10+Requests.writes*10+Requests.logical_reads+1)) AS Score,
	Statements.text AS BatchText,
	LEN(Statements.text) AS BatchTextLength,
	Requests.statement_start_offset/2 AS StatementStartPos,
	CASE
		WHEN Requests.statement_end_offset = -1 THEN LEN(CONVERT(nvarchar(MAX),Statements.text))*2
		ELSE Requests.statement_end_offset
	END/2 AS StatementEndPos,
	(CASE
		WHEN Requests.statement_end_offset = -1 THEN LEN(CONVERT(nvarchar(MAX),Statements.text))*2
		ELSE Requests.statement_end_offset
	END - Requests.statement_start_offset)/2 AS StatementTextLength,
	CASE
		WHEN Requests.sql_handle IS NULL THEN ' '
		ELSE
			SubString(
				Statements.text,
				(Requests.statement_start_offset+2)/2,
				(CASE
					WHEN Requests.statement_end_offset = -1 THEN LEN(CONVERT(nvarchar(MAX),Statements.text))*2
					ELSE Requests.statement_end_offset
				END - Requests.statement_start_offset)/2
			)
	END AS StatementText,
	QueryPlans.query_plan AS QueryPlan
FROM
	sys.dm_exec_sessions AS Sessions
	JOIN sys.dm_exec_requests AS Requests ON Sessions.session_id=Requests.session_id
	LEFT OUTER JOIN sys.databases ON Requests.database_id=databases.database_id
	LEFT OUTER JOIN (
		SELECT blocking_session_id, COUNT(*) AS BlockingRequestCount FROM sys.dm_exec_requests GROUP BY blocking_session_id
	) AS BlockRequests ON Requests.session_id=BlockRequests.blocking_session_id
	LEFT OUTER JOIN (
		SELECT request_id, session_id, SUM(pending_io_count) AS PendingIOCount
		FROM sys.dm_os_tasks WITH (NOLOCK)
		GROUP BY request_id, session_id
	) AS dm_os_tasks ON
		Requests.request_id=dm_os_tasks.request_id
		AND Requests.session_id=dm_os_tasks.session_id
	CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS Statements
	CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS QueryPlans
ORDER BY score DESC
GO

/****** bloqueos por sesion de tipo exclusivo******/  

select  Sessions.session_id,locks.resource_type,locks.resource_database_id,locks.request_session_id,Sessions.login_time,Sessions.host_name,Sessions.program_name,
	Sessions.client_interface_name,Sessions.status,Requests.cpu_time,Sessions.memory_usage,Requests.total_elapsed_time,Requests.command,Statements.text
from sys.dm_tran_locks locks join sys.dm_exec_sessions AS Sessions on locks.request_session_id = Sessions.session_id
	left  JOIN sys.dm_exec_requests AS Requests ON Sessions.session_id=Requests.session_id 
	CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS Statements
where locks.request_mode = 'X'

/***** sesiones conectadas x programa *****/
SELECT ec.client_net_address , es.[program_name] , es.[host_name] , es.login_name , COUNT(ec.session_id) AS [connection count]
FROM sys.dm_exec_sessions AS es INNER JOIN sys.dm_exec_connections AS ec ON es.session_id = ec.session_id 
GROUP BY ec.client_net_address , es.[program_name] , es.[host_name] , es.login_name 
ORDER BY ec.client_net_address , es.[program_name] ;

select  (Requests.total_elapsed_time/1000)/60
from sys.dm_tran_locks locks join sys.dm_exec_sessions AS Sessions on locks.request_session_id = Sessions.session_id
	left  JOIN sys.dm_exec_requests AS Requests ON Sessions.session_id=Requests.session_id 
	CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS Statements
where locks.request_mode = 'X'

/***********     Sesiones e cache con mayor consumo de CPU        *********/

SELECT TOP 50 qs.creation_time, qs.execution_count, qs.total_worker_time as total_cpu_time,
 qs.max_worker_time as max_cpu_time, qs.total_elapsed_time, qs.max_elapsed_time, qs.total_logical_reads, 
 qs.max_logical_reads, qs.total_physical_reads, qs.max_physical_reads,t.[text], qp.query_plan, t.dbid,
  t.objectid, t.encrypted, qs.plan_handle, qs.plan_generation_num 
  FROM sys.dm_exec_query_stats qs CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t 
  CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp ORDER BY qs.total_worker_time DESC

/* revisión de bloqueos*/

SELECT
db.name DBName,
tl.request_session_id,
wt.blocking_session_id,
OBJECT_NAME(p.OBJECT_ID) BlockedObjectName,
tl.resource_type,
h1.TEXT AS RequestingText,
h2.TEXT AS BlockingTest,
tl.request_mode
FROM sys.dm_tran_locks AS tl
INNER JOIN sys.databases db ON db.database_id = tl.resource_database_id
INNER JOIN sys.dm_os_waiting_tasks AS wt ON tl.lock_owner_address = wt.resource_address
INNER JOIN sys.partitions AS p ON p.hobt_id = tl.resource_associated_entity_id
INNER JOIN sys.dm_exec_connections ec1 ON ec1.session_id = tl.request_session_id
INNER JOIN sys.dm_exec_connections ec2 ON ec2.session_id = wt.blocking_session_id
CROSS APPLY sys.dm_exec_sql_text(ec1.most_recent_sql_handle) AS h1
CROSS APPLY sys.dm_exec_sql_text(ec2.most_recent_sql_handle) AS h2
GO
