USE [master]
GO

/****** Object:  StoredProcedure [dbo].[DbaActiveSessions]    Script Date: 11/9/2016 7:27:04 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	Mauricio Rodriguez SBD CLARO
-- Create date: 2016-11-09
-- Description:	SP captura sesiones activas
-- =============================================
CREATE PROCEDURE [dbo].[DbaActiveSessions]
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @TSQL AS NVARCHAR(MAX);
	DECLARE @TSQL2 AS NVARCHAR(MAX);

    /*SESIONES ACTIVAS*/
	set @TSQL='
		SELECT
			Sessions.session_id AS SessionID, Requests.request_id AS RequestID,
			Requests.database_id AS DatabaseID, databases.name AS DatabaseName,
			Sessions.login_name AS LoginName, Sessions.host_name AS HostName, Sessions.program_name AS ProgramName,
			Sessions.client_interface_name AS ClientInterfaceName,
			Requests.blocking_session_id AS BlockedBySessionID,
			ISNULL(BlockRequests.BlockingRequestCount,0) AS BlockingRequestCount,
			Requests.wait_type AS WaitType,
			Requests.wait_time AS WaitTime, Requests.cpu_time AS CPUTime, Requests.total_elapsed_time AS ElapsedTime,
			Requests.reads AS Reads, Requests.writes AS Writes, Requests.logical_reads AS LogicalReads,
			dm_os_tasks.PendingIOCount, Requests.row_count AS [RowCount],
			Requests.granted_query_memory*8 AS GrantedQueryMemoryKB,
			CONVERT(BigInt, (Requests.cpu_time+1))*CONVERT(BigInt, (Requests.reads*10+Requests.writes*10+Requests.logical_reads+1)) AS Score,
			--REPLACE(REPLACE(Statements.text, CHAR(13), ''''), CHAR(10), '''') AS BatchText,
			LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(Statements.text)), CHAR(9), '' ''), CHAR(10), '' ''), CHAR(11), '' ''), CHAR(12), '' ''), CHAR(13), '' '')))AS BatchText,
			LEN(Statements.text) AS BatchTextLength,
			Requests.statement_start_offset/2 AS StatementStartPos
			--CASE
			--	WHEN Requests.statement_end_offset = -1 THEN LEN(CONVERT(nvarchar(MAX),Statements.text))*2
			--	ELSE Requests.statement_end_offset
			--END/2 AS StatementEndPos,
			--(CASE
			--	WHEN Requests.statement_end_offset = -1 THEN LEN(CONVERT(nvarchar(MAX),Statements.text))*2
			--	ELSE Requests.statement_end_offset
			--END - Requests.statement_start_offset)/2 AS StatementTextLength,
			--CASE
			--	WHEN Requests.sql_handle IS NULL THEN '' ''
			--	ELSE
			--		SubString(
			--			Statements.text,
			--			(Requests.statement_start_offset+2)/2,
			--			(CASE
			--				WHEN Requests.statement_end_offset = -1 THEN LEN(CONVERT(nvarchar(MAX),Statements.text))*2
			--				ELSE Requests.statement_end_offset
			--			END - Requests.statement_start_offset)/2
			--		)
			--END AS StatementText			
		FROM
			sys.dm_exec_sessions AS Sessions
			JOIN sys.dm_exec_requests AS Requests ON Sessions.session_id=Requests.session_id
			LEFT OUTER JOIN sys.databases ON Requests.database_id=databases.database_id
			LEFT OUTER JOIN (
				SELECT blocking_session_id, COUNT(*) AS BlockingRequestCount FROM sys.dm_exec_requests GROUP BY blocking_session_id
			) AS BlockRequests ON Requests.session_id=BlockRequests.blocking_session_id
			LEFT OUTER JOIN (
				SELECT request_id, session_id, SUM(pending_io_count) AS PendingIOCount
				FROM sys.dm_os_tasks WITH (NOLOCK)
				GROUP BY request_id, session_id
			) AS dm_os_tasks ON
				Requests.request_id=dm_os_tasks.request_id
				AND Requests.session_id=dm_os_tasks.session_id
			CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS Statements
			CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS QueryPlans
		ORDER BY Score DESC'
		--PRINT @TSQL;
		EXECUTE sp_executesql @TSQL;		
		--set @TSQL2 = '''SQLCMD -S . -d master -Q "'+@TSQL+'" -s "," -o "L:\Audit\result.csv"''';
		--PRINT @TSQL2;
		--EXEC xp_cmdshell 'SQLCMD -S . -d master -Q "'+ ''+'" -s "," -o "L:\Audit\result.csv"';
END

GO

